#include <metal_relational>
#include <metal_stdlib>
#include <simd/simd.h>
using namespace metal;

struct VertexIn
{
    float4 position;
    float4 normal;
    float4 colour;
    float4 tex;
    float4 tangent;
    float4 bitangent;
    int4 bone_ids;
    float4 bone_weights;
};

struct VertexOut
{
    float4 position [[position]];
    float4 vertex_position;
    float4 frag_position;
    float4 view_position;
    float3 tangent_view_pos;
    float3 tangent_frag_pos;
    float3 tangent_light_pos;
    float4 frag_pos_light_space;
    float4 normal;
    float4 view_normal;
    float4 colour;
    float4 tex;
};

struct BoneData
{
    float4x4 bones[100];
};

struct CameraData
{
    float4x4 projection;
    float4x4 view;
    float4x4 normal_view;
    float4 camera;
};

struct LightData
{
    float4 colour;
    float4 position;
    float4 attenuation;
    float4x4 proj;
    float4x4 view;
};

struct ModelData
{
    float4x4 model;
    float4x4 normal_matrix;
};

float3x3 calculate_tbn(float4x4 bone_transform, uint vid, device VertexIn *vertices, float4x4 normal_matrix)
{
    float3 T = normalize(float3(normal_matrix * bone_transform * vertices[vid].tangent));
    float3 B = normalize(float3(normal_matrix * bone_transform * vertices[vid].bitangent));
    float3 N = normalize(float3(normal_matrix * bone_transform * vertices[vid].normal));
    return transpose(float3x3(T, B, N));
}

float4x4 calculate_bone_transform(constant BoneData *bone_data, uint vid, device VertexIn *vertices)
{
    float4x4 bone_transform = bone_data->bones[vertices[vid].bone_ids.x] * vertices[vid].bone_weights.x;
    bone_transform += bone_data->bones[vertices[vid].bone_ids.y] * vertices[vid].bone_weights.y;
    bone_transform += bone_data->bones[vertices[vid].bone_ids.z] * vertices[vid].bone_weights.z;
    bone_transform += bone_data->bones[vertices[vid].bone_ids.w] * vertices[vid].bone_weights.w;

    return transpose(bone_transform);
}

vertex VertexOut vertex_main(
    device VertexIn *vertices [[buffer(0)]],
    constant BoneData *bone_data [[buffer(1)]],
    constant CameraData *camera_data [[buffer(2)]],
    constant LightData *light_data [[buffer(3)]],
    constant ModelData *model_data [[buffer(4)]],
    uint vid [[vertex_id]],
    uint instance_id [[instance_id]])
{
    float4x4 bone_transform = calculate_bone_transform(bone_data, vid, vertices);
    float2 uv = vertices[vid].tex.xy;

    VertexOut out;
    out.vertex_position = vertices[vid].position;
    out.frag_position = transpose(model_data[instance_id].model) * bone_transform * out.vertex_position;
    out.view_position = transpose(camera_data->view) * out.frag_position;
    out.position = transpose(camera_data->projection) * out.view_position;
    out.normal = transpose(model_data[instance_id].normal_matrix) * bone_transform * vertices[vid].normal;
    out.view_normal = transpose(camera_data->normal_view) * out.normal;
    out.colour = vertices[vid].colour;
    out.tex = vertices[vid].tex;

    const float3x3 tbn = calculate_tbn(bone_transform, vid, vertices, transpose(model_data[instance_id].normal_matrix));

    out.tangent_light_pos = tbn * light_data->position.xyz;
    out.tangent_view_pos = tbn * camera_data->camera.xyz;
    out.tangent_frag_pos = tbn * out.frag_position.xyz;

    {% if is_directional_light %}
        out.frag_pos_light_space = transpose(light_data->proj) * transpose(light_data->view) * out.frag_position;
    {% endif %}

    return out;
}
